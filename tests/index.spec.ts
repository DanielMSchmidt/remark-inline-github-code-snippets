import { describe, it, expect } from "vitest";
import dedent from "dedent";
import { process } from "./util/process";

const source = dedent`
  # The Main Heading

  [inline](https://github.com/hashicorp/terraform/blob/main/internal/promising/promise.go#L30-L40)
  [ignore](https://github.com/hashicorp/terraform/blob/main/internal/promising/promise.go#L30-L40)
  ## Ignored because it's not a github url
  [inline](https://example.com)
  ## Permalinks
  [inline](https://github.com/hashicorp/terraform/blob/27f26bd1b5c015b20c878f74a74aab1cb76795f8/internal/promising/promise.go#L62-L64)
`;

describe("remark-inline-github-code-snippets", () => {
  // ******************************************
  it("with no options", async () => {
    const result = await process(source, {});
    expect(result.toString()).toMatchInlineSnapshot(`
      "
      <h1>The Main Heading</h1>
      <p>
        <pre><code class="language-go">type promiseResult struct {
      	val any
      	err error

      	// forced is set when this result was generated by the promise machinery
      	// itself, as opposed to from calling tasks. We use this to behave more
      	// gracefully when the responsible task resolution races with the internal
      	// error, so that we can treat that differently to when the responsible
      	// task itself tries to resolve a promise multiple times.
      	forced bool
      }
      </code></pre><a href="https://github.com/hashicorp/terraform/blob/main/internal/promising/promise.go#L30-L40">ignore</a>
      </p>
      <h2>Ignored because it's not a github url</h2>
      <p><a href="https://example.com">inline</a></p>
      <h2>Permalinks</h2>
      <p>
        <pre><code class="language-go">type PromiseID struct {
      	promise *promise
      }
      </code></pre>
      </p>
      "
    `);
  });

  it("with originComment option", async () => {
    const result = await process(source, {
      originComment: "Source: <url>",
    });
    expect(result.toString()).toMatchInlineSnapshot(`
      "
      <h1>The Main Heading</h1>
      <p>
        <pre><code class="language-go">// Source: https://github.com/hashicorp/terraform/blob/main/internal/promising/promise.go#L30-L40
      type promiseResult struct {
      	val any
      	err error

      	// forced is set when this result was generated by the promise machinery
      	// itself, as opposed to from calling tasks. We use this to behave more
      	// gracefully when the responsible task resolution races with the internal
      	// error, so that we can treat that differently to when the responsible
      	// task itself tries to resolve a promise multiple times.
      	forced bool
      }
      </code></pre><a href="https://github.com/hashicorp/terraform/blob/main/internal/promising/promise.go#L30-L40">ignore</a>
      </p>
      <h2>Ignored because it's not a github url</h2>
      <p><a href="https://example.com">inline</a></p>
      <h2>Permalinks</h2>
      <p>
        <pre><code class="language-go">// Source: https://github.com/hashicorp/terraform/blob/27f26bd1b5c015b20c878f74a74aab1cb76795f8/internal/promising/promise.go#L62-L64
      type PromiseID struct {
      	promise *promise
      }
      </code></pre>
      </p>
      "
    `);
  });

  it("errors with single-line links", async () => {
    expect(
      process(
        dedent`
      # The Main Heading

      [inline](https://github.com/hashicorp/terraform/blob/main/internal/promising/promise.go#L30)`,
        {},
      ),
    ).rejects.toThrowErrorMatchingSnapshot();
  });

  it("ignores URLs that look correct but load nothing", async () => {
    const result = await process(
      dedent`
        # The Main Heading

        [inline](https://github.com/hashicorp/terraform123123/blob/main/internal/promising/promise.go#L30-L40)`,
      {},
    );

    expect(result.toString()).toMatchSnapshot();
  });
});
